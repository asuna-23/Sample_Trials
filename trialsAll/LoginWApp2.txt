// App

<template>
  <div>
    <!-- Show LoginComponent if the user is not logged in -->
    <LoginComponent
      v-if="!isLoggedIn"
      :users="users"
      @login-success="handleLoginSuccess"
      @login-failed="handleLoginFailed"
    />

    <!-- Show the rest of the app when the user is logged in -->
    <div v-else>
      <b-navbar toggleable="lg" type="dark" variant="dark" sticky="top" class="text-center">
        <b-navbar-toggle target="navbar-toggle-collapse">
          <i class="bi bi-list text-light"></i>
        </b-navbar-toggle>

        <b-collapse id="navbar-toggle-collapse" is-nav>
          <b-navbar-nav class="ml-auto">
            <!-- Navigation links -->
            <b-navbar-brand v-for="(route, id) in route" :key="id">
              <common-route-link :is="route.componentName" :key="id" :item="route" />
            </b-navbar-brand>

            <!-- Right-aligned user actions -->
            <b-nav-item-dropdown right v-if="loggedInUser">
              <template #button-content>
                {{ loggedInUser.email }} <i class="bi bi-person-circle"></i>
              </template>
              <b-dropdown-item @click="deleteAccount" variant="danger">
                Delete Account
              </b-dropdown-item>
              <b-dropdown-item @click="logout">
                Logout
              </b-dropdown-item>
            </b-nav-item-dropdown>
          </b-navbar-nav>
        </b-collapse>
      </b-navbar>

      <!-- Main app content -->
      <router-view />
    </div>
  </div>
</template>

<script>
import LoginComponent from './components/LoginComponent.vue';
import { ROUTES_PROPERTIES } from './common/recipe/rRoutes';
import CommonRouteLink from './components/common/CommonRouteLink.vue';

export default {
  name: 'app',
  components: {
    LoginComponent,
    CommonRouteLink
  },
  data() {
    return {
      isLoggedIn: false, // Tracks the user's login state
      route: [...ROUTES_PROPERTIES],
      loggedInUser: null, // To store logged-in user details
      users: [
        { email: 'john@example.com', password: '12345' },
        { email: 'jane@example.com', password: 'abcde' }
      ] // Sample user data
    };
  },
  methods: {
    handleLoginSuccess(user) {
      this.isLoggedIn = true;
      this.loggedInUser = user; // Set logged-in user
    },
    handleLoginFailed() {
      this.isLoggedIn = false;
      this.loggedInUser = null; // Clear logged-in user on failure
    },
    logout() {
      this.isLoggedIn = false;
      this.loggedInUser = null; // Clear session on logout
      alert('You have logged out.');
    },
    deleteAccount() {
      if (confirm('Are you sure you want to delete your account? This action cannot be undone.')) {
        const userIndex = this.users.findIndex(u => u.email === this.loggedInUser.email);
        if (userIndex > -1) {
          this.users.splice(userIndex, 1); // Delete the user from the list
          alert('Your account has been deleted successfully.');
          this.logout(); // Log the user out after account deletion
        } else {
          alert('Error: Unable to find your account.');
        }
      }
    }
  }
};
</script>


// Login

<template>
  <div class="login-container d-flex justify-content-center align-items-center">
    <b-card class="login-card">
      <b-tabs v-model="activeTab">
        <!-- Login Tab -->
        <b-tab title="Login">
          <b-form @submit.prevent="login">
            <b-form-group label="Email" label-for="loginEmail">
              <b-form-input id="loginEmail" v-model="loginForm.email" type="email" required></b-form-input>
            </b-form-group>

            <b-form-group label="Password" label-for="loginPassword">
              <b-form-input id="loginPassword" v-model="loginForm.password" type="password" required></b-form-input>
            </b-form-group>

            <b-button type="submit" variant="primary">Login</b-button>
          </b-form>
        </b-tab>

        <!-- Register Tab -->
        <b-tab title="Register">
          <b-form @submit.prevent="register">
            <b-form-group label="Email" label-for="registerEmail">
              <b-form-input id="registerEmail" v-model="registerForm.email" type="email" required></b-form-input>
            </b-form-group>

            <b-form-group label="Password" label-for="registerPassword">
              <b-form-input id="registerPassword" v-model="registerForm.password" type="password" required></b-form-input>
            </b-form-group>

            <b-button type="submit" variant="success">Register</b-button>
          </b-form>
        </b-tab>
      </b-tabs>
    </b-card>
  </div>
</template>

<script>
export default {
  props: {
    users: Array // Receives the users array as a prop
  },
  data() {
    return {
      activeTab: 0, // To toggle between login and register
      loginForm: {
        email: '',
        password: ''
      },
      registerForm: {
        email: '',
        password: ''
      }
    };
  },
  methods: {
    login() {
      // Find the user in the users array passed as a prop
      const user = this.users.find(
        u => u.email === this.loginForm.email && u.password === this.loginForm.password
      );
      if (user) {
        // Emit login success event to the parent component with user data
        this.$emit('login-success', user);
        alert('Login successful!');
      } else {
        // Emit login failed event to the parent component
        this.$emit('login-failed');
        alert('Invalid login credentials!');
      }
    },
    register() {
      // Check if the email already exists in the users array
      const userExists = this.users.find(u => u.email === this.registerForm.email);
      if (!userExists) {
        // Emit a registration event (if you need to handle user registration in parent)
        this.$emit('register', { ...this.registerForm });
        alert('Account successfully registered!');
        this.activeTab = 0; // Switch to login tab after registration
      } else {
        alert('User already exists!');
      }
    }
  }
};
</script>

<style scoped>
.login-container {
  height: 100vh;
  background-color: #f8f9fa;
}
.login-card {
  width: 400px;
  padding: 20px;
}
</style>



// App

<template>
  <div>
    <!-- Show LoginComponent if the user is not logged in -->
    <LoginComponent v-if="!isLoggedIn" @login-success="handleLoginSuccess" @login-failed="handleLoginFailed" />

    <!-- Show the rest of the app when the user is logged in -->
    <div v-else>
      <b-navbar toggleable="lg" type="dark" variant="dark" sticky="top" class="text-center">
        <b-navbar-toggle target="navbar-toggle-collapse">
          <i class="bi bi-list text-light"></i>
        </b-navbar-toggle>

        <b-collapse id="navbar-toggle-collapse" is-nav>
          <b-navbar-nav class="ml-auto">
            <!-- Navigation links -->
            <b-navbar-brand v-for="(route, id) in route" :key="id">
              <common-route-link :is="route.componentName" :key="id" :item="route" />
            </b-navbar-brand>

            <!-- Right-aligned user actions -->
            <b-nav-item-dropdown right v-if="loggedInUser">
              <template #button-content>
                {{ loggedInUser.email }} <i class="bi bi-person-circle"></i>
              </template>
              <b-dropdown-item @click="deleteAccount" variant="danger">
                Delete Account
              </b-dropdown-item>
              <b-dropdown-item @click="logout">
                Logout
              </b-dropdown-item>
            </b-nav-item-dropdown>
          </b-navbar-nav>
        </b-collapse>
      </b-navbar>

      <!-- Main app content -->
      <router-view />
    </div>
  </div>
</template>

<script>
import LoginComponent from './components/LoginComponent.vue';
import { ROUTES_PROPERTIES } from './common/recipe/rRoutes';
import CommonRouteLink from './components/common/CommonRouteLink.vue';

export default {
  name: 'app',
  components: {
    LoginComponent,
    CommonRouteLink
  },
  data() {
    return {
      isLoggedIn: false, // Tracks the user's login state
      route: [...ROUTES_PROPERTIES],
      loggedInUser: null, // To store logged-in user details
      users: [
        { email: 'john@example.com', password: '12345' },
        { email: 'jane@example.com', password: 'abcde' }
      ] // Sample user data
    };
  },
  methods: {
    handleLoginSuccess(user) {
      this.isLoggedIn = true;
      this.loggedInUser = user; // Set logged-in user
    },
    handleLoginFailed() {
      this.isLoggedIn = false;
      this.loggedInUser = null; // Clear logged-in user on failure
    },
    logout() {
      this.isLoggedIn = false;
      this.loggedInUser = null; // Clear session on logout
      alert('You have logged out.');
    },
    deleteAccount() {
      if (confirm('Are you sure you want to delete your account? This action cannot be undone.')) {
        const userIndex = this.users.findIndex(u => u.email === this.loggedInUser.email);
        if (userIndex > -1) {
          this.users.splice(userIndex, 1); // Delete the user from the list
          alert('Your account has been deleted successfully.');
          this.logout(); // Log the user out after account deletion
        } else {
          alert('Error: Unable to find your account.');
        }
      }
    }
  }
};
</script>

<style scoped>
.navbar {
  justify-content: space-between;
}
</style>

// Login

<template>
  <div class="login-container d-flex justify-content-center align-items-center">
    <b-card class="login-card">
      <b-tabs v-model="activeTab">
        <!-- Login Tab -->
        <b-tab title="Login">
          <b-form @submit.prevent="login">
            <b-form-group label="Email" label-for="loginEmail">
              <b-form-input id="loginEmail" v-model="loginForm.email" type="email" required></b-form-input>
            </b-form-group>

            <b-form-group label="Password" label-for="loginPassword">
              <b-form-input id="loginPassword" v-model="loginForm.password" type="password" required></b-form-input>
            </b-form-group>

            <b-button type="submit" variant="primary">Login</b-button>
          </b-form>
        </b-tab>

        <!-- Register Tab -->
        <b-tab title="Register">
          <b-form @submit.prevent="register">
            <b-form-group label="Email" label-for="registerEmail">
              <b-form-input id="registerEmail" v-model="registerForm.email" type="email" required></b-form-input>
            </b-form-group>

            <b-form-group label="Password" label-for="registerPassword">
              <b-form-input id="registerPassword" v-model="registerForm.password" type="password" required></b-form-input>
            </b-form-group>

            <b-button type="submit" variant="success">Register</b-button>
          </b-form>
        </b-tab>
      </b-tabs>
    </b-card>
  </div>
</template>

<script>
export default {
  data() {
    return {
      activeTab: 0, // To toggle between login and register
      loginForm: {
        email: '',
        password: ''
      },
      registerForm: {
        email: '',
        password: ''
      },
      users: [
        { email: 'john@example.com', password: '12345' },
        { email: 'jane@example.com', password: 'abcde' }
      ] // Sample users
    };
  },
  methods: {
    login() {
      // Find the user in the users array
      const user = this.users.find(
        u => u.email === this.loginForm.email && u.password === this.loginForm.password
      );
      if (user) {
        // Emit login success event to the parent component with user data
        this.$emit('login-success', user);
        alert('Login successful!');
      } else {
        // Emit login failed event to the parent component
        this.$emit('login-failed');
        alert('Invalid login credentials!');
      }
    },
    register() {
      // Check if the email already exists in the users array
      const userExists = this.users.find(u => u.email === this.registerForm.email);
      if (!userExists) {
        // Add the new user to the users array
        this.users.push({ ...this.registerForm });
        alert('Account successfully registered!');
        this.activeTab = 0; // Switch to login tab after registration
      } else {
        alert('User already exists!');
      }
    }
  }
};
</script>

<style scoped>
.login-container {
  height: 100vh;
  background-color: #f8f9fa;
}
.login-card {
  width: 400px;
  padding: 20px;
}
</style>

